
type LibString = {
    constructor() => {};

    fn length = (s: string): number => {
        return charCount(s);
    };

    --fn at = (s: string, idx: number): string => {
    --    return charAt(s, idx);
    --};

    -- Split a string by (CR)LF
    fn lines = (s: string): enumerable<string> => {
        enumerable<string> ss = [] of string;

        number len = trimmedLength(s);
        number i = 0;
        string acc = "";
        while ( i < len ) {
            string c = charAt(s, i);
            lLog("Lines | len: " + numberToString(len) + " | i: " + numberToString(i) + " | acc: " + acc + " | char: '" + c + "'");

            if ( c == "\r" ) {
                continue;
            }

            if ( c == "\n" ) {
                ss[] = acc;
                acc = "";
                continue;
            }

            acc = acc + c;
            i += 1;
        }

        if ( acc != "" ) {
            ss[] = acc;
        }

        return ss;
    };

};

LibString String = LibString();

type SWebRequest = {
    connection conn;
    string raw = "";
    bool isRead = false;

    -- Parsed from the Request-Line (RFC 2616 ยง 5.1)
    string method = "";
    string uri = "";
    string httpVersion = "";

    constructor(c: connection) => {
        conn = c;
    };

    constructor(c: connection, s: string) => {
        conn = c;
        raw = s;
        isRead = true;
    };

    fn readRaw = (): void => {
        if ( isRead ) {
            return;
        }

        raw = readFromConnection(conn);
        isRead = true;
    };

    fn parse = (): void => {
        if ( !isRead ) {
            readRaw();
        }

        enumerable<string> lines = String.lines(raw);
        enumerate lines as line {
            lLog("line: " + line);
        }
    };
};

type SWebServer = {
    number port;
    number pendingConnectionLimit;
    socket sock;

    constructor(p: number, pcl: number) => {
        port = p;
        pendingConnectionLimit = pcl;
        sock = getSocket(port, pendingConnectionLimit);
    };

    fn open = (): void => {
        openSocket(sock);
        log("Opened socket on port " + numberToString(port));
    };

    fn accept = (): SWebRequest => {
        return SWebRequest(acceptSocketConnection(sock));
    };

    fn log = (msg: string): void => {
        lLog("[SWebServer] " + msg);
    };
};

SWebServer s = SWebServer(4000, 50);
s.open();

SWebRequest r = s.accept();
r.parse();
