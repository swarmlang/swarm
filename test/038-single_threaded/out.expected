[35m[DEBUG] [0mParsing argument: /home/garrettmills/Projects/swarm/test/038-single_threaded/test.svi
[0m[35m[DEBUG] [0mGot input file: /home/garrettmills/Projects/swarm/test/038-single_threaded/test.svi
[0m[35m[DEBUG] [0mVM: assignvalue Location<l:i> NumberReference<1.000000>
[0m[35m[DEBUG] [0mVM: Location<l:i> <- NumberReference<1.000000>
[0m[35m[DEBUG] [0mVM: Skipping uncalled function body: BEGINFN<Location<f:INNER>, TypeReference<Primitive<VOID>>>, pc: 4
[0m[35m[DEBUG] [0mVM: Skipping uncalled function body: BEGINFN<Location<f:OUTER>, TypeReference<Primitive<VOID>>>, pc: 9
[0m[35m[DEBUG] [0mVM: call0 Location<f:OUTER>
[0m[35m[DEBUG] [0mVM: ensureType: TypeReference<Primitive<VOID>>
[0m[35m[DEBUG] [0mVM: load inline function: OUTER (#params: 0) (returns: TypeReference<Primitive<VOID>>)
[0m[35m[DEBUG] [0mVM: ensureFunction: FunctionReference<InlineFunction<f:OUTER, rt: Primitive<VOID>>>
[0m[35m[DEBUG] [0mVM: inline call: InlineFunctionCall<f:OUTER> (pc: 4)
[0m[35m[DEBUG] [0mVM: next instruction for inline call: SCOPEOF<Location<l:i>>
[0m[35m[DEBUG] [0mVM: scopeof Location<l:i>
[0m[35m[DEBUG] [0mVM: assignvalue Location<l:i> NumberReference<5.000000>
[0m[35m[DEBUG] [0mVM: Location<l:i> <- NumberReference<5.000000>
[0m[35m[DEBUG] [0mVM: call0 Location<f:INNER>
[0m[35m[DEBUG] [0mVM: ensureType: TypeReference<Primitive<VOID>>
[0m[35m[DEBUG] [0mVM: load inline function: INNER (#params: 0) (returns: TypeReference<Primitive<VOID>>)
[0m[35m[DEBUG] [0mVM: ensureFunction: FunctionReference<InlineFunction<f:INNER, rt: Primitive<VOID>>>
[0m[35m[DEBUG] [0mVM: inline call: InlineFunctionCall<f:INNER> (pc: 1)
[0m[35m[DEBUG] [0mVM: next instruction for inline call: ASSIGNEVAL<Location<l:i>, PLUS<Location<l:i>, NumberReference<1.000000>>>
[0m[35m[DEBUG] [0mVM: assigneval Location<l:i> PLUS<Location<l:i>, NumberReference<1.000000>>
[0m[35m[DEBUG] [0mVM: plus Location<l:i> NumberReference<1.000000>
[0m[35m[DEBUG] [0mVM: ensureNumber: NumberReference<5.000000>
[0m[35m[DEBUG] [0mVM: ensureNumber: NumberReference<1.000000>
[0m[35m[DEBUG] [0mVM: Location<l:i> <- NumberReference<6.000000>
[0m[35m[DEBUG] [0mVM: return0
[0m[35m[DEBUG] [0mVM: return0
[0m[35m[DEBUG] [0mVM: assignvalue Location<l:i> Location<l:i>
[0m[35m[DEBUG] [0mVM: Location<l:i> <- NumberReference<1.000000>
[0m[35m[DEBUG] [0mVM: assignvalue Location<l:j> NumberReference<1.000000>
[0m[35m[DEBUG] [0mVM: Location<l:j> <- NumberReference<1.000000>
[0m[35m[DEBUG] [0mVM: assignvalue Location<s:k> NumberReference<1.000000>
[0m[35m[DEBUG] [0mVM: Location<s:k> <- NumberReference<1.000000>
[0m[35m[DEBUG] [0mVM: Skipping uncalled function body: BEGINFN<Location<f:INC>, TypeReference<Primitive<VOID>>>, pc: 17
[0m[35m[DEBUG] [0mVM: Skipping uncalled function body: BEGINFN<Location<f:PUSH_INC>, TypeReference<Primitive<VOID>>>, pc: 24
[0m[35m[DEBUG] [0mVM: call0 Location<f:PUSH_INC>
[0m[35m[DEBUG] [0mVM: ensureType: TypeReference<Primitive<VOID>>
[0m[35m[DEBUG] [0mVM: load inline function: PUSH_INC (#params: 0) (returns: TypeReference<Primitive<VOID>>)
[0m[35m[DEBUG] [0mVM: ensureFunction: FunctionReference<InlineFunction<f:PUSH_INC, rt: Primitive<VOID>>>
[0m[35m[DEBUG] [0mVM: inline call: InlineFunctionCall<f:PUSH_INC> (pc: 17)
[0m[35m[DEBUG] [0mVM: next instruction for inline call: PUSHCALL0<Location<f:INC>>
[0m[35m[DEBUG] [0mVM: pushcall0 Location<f:INC>
[0m[35m[DEBUG] [0mVM: ensureType: TypeReference<Primitive<VOID>>
[0m[35m[DEBUG] [0mVM: load inline function: INC (#params: 0) (returns: TypeReference<Primitive<VOID>>)
[0m[35m[DEBUG] [0mVM: ensureFunction: FunctionReference<InlineFunction<f:INC, rt: Primitive<VOID>>>
[0m[35m[DEBUG] [0mVM: pushCall - call: InlineFunctionCall<f:INC> | job: SingleThreaded::QueueJob<id: 0, call: InlineFunctionCall<f:INC>>
[0m[35m[DEBUG] [0mGot VM from queue: Runtime::VirtualMachine<shouldAdvance: yes>
[0m[35m[DEBUG] [0mVM: inline call: InlineFunctionCall<f:INC> (pc: 13)
[0m[35m[DEBUG] [0mVM: next instruction for inline call: ASSIGNEVAL<Location<l:j>, PLUS<Location<l:j>, NumberReference<1.000000>>>
[0m[35m[DEBUG] [0mVM: assigneval Location<l:j> PLUS<Location<l:j>, NumberReference<1.000000>>
[0m[35m[DEBUG] [0mVM: plus Location<l:j> NumberReference<1.000000>
[0m[35m[DEBUG] [0mVM: ensureNumber: NumberReference<1.000000>
[0m[35m[DEBUG] [0mVM: ensureNumber: NumberReference<1.000000>
[0m[35m[DEBUG] [0mVM: Location<l:j> <- NumberReference<2.000000>
[0m[35m[DEBUG] [0mVM: assigneval Location<s:k> PLUS<Location<s:k>, NumberReference<1.000000>>
[0m[35m[DEBUG] [0mVM: plus Location<s:k> NumberReference<1.000000>
[0m[35m[DEBUG] [0mVM: ensureNumber: NumberReference<1.000000>
[0m[35m[DEBUG] [0mVM: ensureNumber: NumberReference<1.000000>
[0m[35m[DEBUG] [0mVM: Location<s:k> <- NumberReference<2.000000>
[0m[35m[DEBUG] [0mVM: return0
[0m[35m[DEBUG] [0mVM: pushcall0 Location<f:INC>
[0m[35m[DEBUG] [0mVM: ensureType: TypeReference<Primitive<VOID>>
[0m[35m[DEBUG] [0mVM: load inline function: INC (#params: 0) (returns: TypeReference<Primitive<VOID>>)
[0m[35m[DEBUG] [0mVM: ensureFunction: FunctionReference<InlineFunction<f:INC, rt: Primitive<VOID>>>
[0m[35m[DEBUG] [0mVM: pushCall - call: InlineFunctionCall<f:INC> | job: SingleThreaded::QueueJob<id: 1, call: InlineFunctionCall<f:INC>>
[0m[35m[DEBUG] [0mGot VM from queue: Runtime::VirtualMachine<shouldAdvance: yes>
[0m[35m[DEBUG] [0mVM: inline call: InlineFunctionCall<f:INC> (pc: 13)
[0m[35m[DEBUG] [0mVM: next instruction for inline call: ASSIGNEVAL<Location<l:j>, PLUS<Location<l:j>, NumberReference<1.000000>>>
[0m[35m[DEBUG] [0mVM: assigneval Location<l:j> PLUS<Location<l:j>, NumberReference<1.000000>>
[0m[35m[DEBUG] [0mVM: plus Location<l:j> NumberReference<1.000000>
[0m[35m[DEBUG] [0mVM: ensureNumber: NumberReference<1.000000>
[0m[35m[DEBUG] [0mVM: ensureNumber: NumberReference<1.000000>
[0m[35m[DEBUG] [0mVM: Location<l:j> <- NumberReference<2.000000>
[0m[35m[DEBUG] [0mVM: assigneval Location<s:k> PLUS<Location<s:k>, NumberReference<1.000000>>
[0m[35m[DEBUG] [0mVM: plus Location<s:k> NumberReference<1.000000>
[0m[35m[DEBUG] [0mVM: ensureNumber: NumberReference<2.000000>
[0m[35m[DEBUG] [0mVM: ensureNumber: NumberReference<1.000000>
[0m[35m[DEBUG] [0mVM: Location<s:k> <- NumberReference<3.000000>
[0m[35m[DEBUG] [0mVM: return0
[0m[35m[DEBUG] [0mVM: pushcall0 Location<f:INC>
[0m[35m[DEBUG] [0mVM: ensureType: TypeReference<Primitive<VOID>>
[0m[35m[DEBUG] [0mVM: load inline function: INC (#params: 0) (returns: TypeReference<Primitive<VOID>>)
[0m[35m[DEBUG] [0mVM: ensureFunction: FunctionReference<InlineFunction<f:INC, rt: Primitive<VOID>>>
[0m[35m[DEBUG] [0mVM: pushCall - call: InlineFunctionCall<f:INC> | job: SingleThreaded::QueueJob<id: 2, call: InlineFunctionCall<f:INC>>
[0m[35m[DEBUG] [0mGot VM from queue: Runtime::VirtualMachine<shouldAdvance: yes>
[0m[35m[DEBUG] [0mVM: inline call: InlineFunctionCall<f:INC> (pc: 13)
[0m[35m[DEBUG] [0mVM: next instruction for inline call: ASSIGNEVAL<Location<l:j>, PLUS<Location<l:j>, NumberReference<1.000000>>>
[0m[35m[DEBUG] [0mVM: assigneval Location<l:j> PLUS<Location<l:j>, NumberReference<1.000000>>
[0m[35m[DEBUG] [0mVM: plus Location<l:j> NumberReference<1.000000>
[0m[35m[DEBUG] [0mVM: ensureNumber: NumberReference<1.000000>
[0m[35m[DEBUG] [0mVM: ensureNumber: NumberReference<1.000000>
[0m[35m[DEBUG] [0mVM: Location<l:j> <- NumberReference<2.000000>
[0m[35m[DEBUG] [0mVM: assigneval Location<s:k> PLUS<Location<s:k>, NumberReference<1.000000>>
[0m[35m[DEBUG] [0mVM: plus Location<s:k> NumberReference<1.000000>
[0m[35m[DEBUG] [0mVM: ensureNumber: NumberReference<3.000000>
[0m[35m[DEBUG] [0mVM: ensureNumber: NumberReference<1.000000>
[0m[35m[DEBUG] [0mVM: Location<s:k> <- NumberReference<4.000000>
[0m[35m[DEBUG] [0mVM: return0
[0m[35m[DEBUG] [0mVM: pushcall0 Location<f:INC>
[0m[35m[DEBUG] [0mVM: ensureType: TypeReference<Primitive<VOID>>
[0m[35m[DEBUG] [0mVM: load inline function: INC (#params: 0) (returns: TypeReference<Primitive<VOID>>)
[0m[35m[DEBUG] [0mVM: ensureFunction: FunctionReference<InlineFunction<f:INC, rt: Primitive<VOID>>>
[0m[35m[DEBUG] [0mVM: pushCall - call: InlineFunctionCall<f:INC> | job: SingleThreaded::QueueJob<id: 3, call: InlineFunctionCall<f:INC>>
[0m[35m[DEBUG] [0mGot VM from queue: Runtime::VirtualMachine<shouldAdvance: yes>
[0m[35m[DEBUG] [0mVM: inline call: InlineFunctionCall<f:INC> (pc: 13)
[0m[35m[DEBUG] [0mVM: next instruction for inline call: ASSIGNEVAL<Location<l:j>, PLUS<Location<l:j>, NumberReference<1.000000>>>
[0m[35m[DEBUG] [0mVM: assigneval Location<l:j> PLUS<Location<l:j>, NumberReference<1.000000>>
[0m[35m[DEBUG] [0mVM: plus Location<l:j> NumberReference<1.000000>
[0m[35m[DEBUG] [0mVM: ensureNumber: NumberReference<1.000000>
[0m[35m[DEBUG] [0mVM: ensureNumber: NumberReference<1.000000>
[0m[35m[DEBUG] [0mVM: Location<l:j> <- NumberReference<2.000000>
[0m[35m[DEBUG] [0mVM: assigneval Location<s:k> PLUS<Location<s:k>, NumberReference<1.000000>>
[0m[35m[DEBUG] [0mVM: plus Location<s:k> NumberReference<1.000000>
[0m[35m[DEBUG] [0mVM: ensureNumber: NumberReference<4.000000>
[0m[35m[DEBUG] [0mVM: ensureNumber: NumberReference<1.000000>
[0m[35m[DEBUG] [0mVM: Location<s:k> <- NumberReference<5.000000>
[0m[35m[DEBUG] [0mVM: return0
[0m[35m[DEBUG] [0mVM: pushcall0 Location<f:INC>
[0m[35m[DEBUG] [0mVM: ensureType: TypeReference<Primitive<VOID>>
[0m[35m[DEBUG] [0mVM: load inline function: INC (#params: 0) (returns: TypeReference<Primitive<VOID>>)
[0m[35m[DEBUG] [0mVM: ensureFunction: FunctionReference<InlineFunction<f:INC, rt: Primitive<VOID>>>
[0m[35m[DEBUG] [0mVM: pushCall - call: InlineFunctionCall<f:INC> | job: SingleThreaded::QueueJob<id: 4, call: InlineFunctionCall<f:INC>>
[0m[35m[DEBUG] [0mGot VM from queue: Runtime::VirtualMachine<shouldAdvance: yes>
[0m[35m[DEBUG] [0mVM: inline call: InlineFunctionCall<f:INC> (pc: 13)
[0m[35m[DEBUG] [0mVM: next instruction for inline call: ASSIGNEVAL<Location<l:j>, PLUS<Location<l:j>, NumberReference<1.000000>>>
[0m[35m[DEBUG] [0mVM: assigneval Location<l:j> PLUS<Location<l:j>, NumberReference<1.000000>>
[0m[35m[DEBUG] [0mVM: plus Location<l:j> NumberReference<1.000000>
[0m[35m[DEBUG] [0mVM: ensureNumber: NumberReference<1.000000>
[0m[35m[DEBUG] [0mVM: ensureNumber: NumberReference<1.000000>
[0m[35m[DEBUG] [0mVM: Location<l:j> <- NumberReference<2.000000>
[0m[35m[DEBUG] [0mVM: assigneval Location<s:k> PLUS<Location<s:k>, NumberReference<1.000000>>
[0m[35m[DEBUG] [0mVM: plus Location<s:k> NumberReference<1.000000>
[0m[35m[DEBUG] [0mVM: ensureNumber: NumberReference<5.000000>
[0m[35m[DEBUG] [0mVM: ensureNumber: NumberReference<1.000000>
[0m[35m[DEBUG] [0mVM: Location<s:k> <- NumberReference<6.000000>
[0m[35m[DEBUG] [0mVM: return0
[0m[35m[DEBUG] [0mVM: return0
[0m[35m[DEBUG] [0mVM: assignvalue Location<l:j> Location<l:j>
[0m[35m[DEBUG] [0mVM: Location<l:j> <- NumberReference<1.000000>
[0m[35m[DEBUG] [0mVM: assignvalue Location<s:k> Location<s:k>
[0m[35m[DEBUG] [0mVM: Location<s:k> <- NumberReference<6.000000>
[0m