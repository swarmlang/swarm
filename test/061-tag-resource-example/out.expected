[35m   debug [39m[0m[vm] assigneval Location<l:sweden_tag_call> CURRY<Location<f:TAG>, StringReference<region>>
[35m   debug [39m[0m[vm] curry Location<f:TAG> StringReference<region>
[35m   debug [39m[0m[vm] ensureFunction: FunctionReference<TagFunction<>>
[35m   debug [39m[0m[vm] Location<l:sweden_tag_call> <- FunctionReference<CurriedFunction<f: TagFunction<>, ref: StringReference<region>>>
[35m   debug [39m[0m[vm] assigneval Location<l:sweden_tag> CALL1<Location<l:sweden_tag_call>, StringReference<sweden>>
[35m   debug [39m[0m[vm] assignEval: got call0 or call1
[35m   debug [39m[0m[vm] assignEval: jumping to call
[35m   debug [39m[0m[vm] call1 Location<l:sweden_tag_call> StringReference<sweden>
[35m   debug [39m[0m[vm] ensureFunction: FunctionReference<CurriedFunction<f: TagFunction<>, ref: StringReference<region>>>
[35m   debug [39m[0m[vm] provider call: TagFunctionCall<>
[35m   debug [39m[0m[vm] assigneval Location<l:sweden_tag> CALL1<Location<l:sweden_tag_call>, StringReference<sweden>>
[35m   debug [39m[0m[vm] assignEval: got call0 or call1
[35m   debug [39m[0m[vm] assignEval: jumped from return
[35m   debug [39m[0m[vm] Location<l:sweden_tag> <- ResourceReference<Prologue::TagResource<region -> sweden>>
[35m   debug [39m[0m[vm] assigneval Location<l:tag_t> CALL0<Location<f:TAG_T>>
[35m   debug [39m[0m[vm] assignEval: got call0 or call1
[35m   debug [39m[0m[vm] assignEval: jumping to call
[35m   debug [39m[0m[vm] call0 Location<f:TAG_T>
[35m   debug [39m[0m[vm] ensureFunction: FunctionReference<TagTFunction<>>
[35m   debug [39m[0m[vm] provider call: TagTFunctionCall<>
[35m   debug [39m[0m[vm] assigneval Location<l:tag_t> CALL0<Location<f:TAG_T>>
[35m   debug [39m[0m[vm] assignEval: got call0 or call1
[35m   debug [39m[0m[vm] assignEval: jumped from return
[35m   debug [39m[0m[vm] Location<l:tag_t> <- TypeReference<Opaque<PROLOGUE::TAG>>
[35m   debug [39m[0m[vm] assigneval Location<l:tag_resource_t> CALL1<Location<f:RESOURCE_T>, Location<l:tag_t>>
[35m   debug [39m[0m[vm] assignEval: got call0 or call1
[35m   debug [39m[0m[vm] assignEval: jumping to call
[35m   debug [39m[0m[vm] call1 Location<f:RESOURCE_T> Location<l:tag_t>
[35m   debug [39m[0m[vm] ensureFunction: FunctionReference<ResourceTFunction<>>
[35m   debug [39m[0m[vm] provider call: ResourceTFunctionCall<>
[35m   debug [39m[0m[vm] assigneval Location<l:tag_resource_t> CALL1<Location<f:RESOURCE_T>, Location<l:tag_t>>
[35m   debug [39m[0m[vm] assignEval: got call0 or call1
[35m   debug [39m[0m[vm] assignEval: jumped from return
[35m   debug [39m[0m[vm] Location<l:tag_resource_t> <- TypeReference<RESOURCE<Opaque<PROLOGUE::TAG>>>
[35m   debug [39m[0m[vm] Skipping uncalled function body: BEGINFN<Location<f:RUNS_IN_SWEDEN>, TypeReference<Primitive<VOID>>>, pc: 9
[35m   debug [39m[0m[vm] with Location<l:sweden_tag> Location<f:RUNS_IN_SWEDEN>
[35m   debug [39m[0m[vm] ensureResource: ResourceReference<Prologue::TagResource<region -> sweden>>
[35m   debug [39m[0m[vm] ensureType: TypeReference<RESOURCE<Opaque<PROLOGUE::TAG>>>
[35m   debug [39m[0m[vm] ensureType: TypeReference<Primitive<VOID>>
[35m   debug [39m[0m[vm] load inline function: RUNS_IN_SWEDEN (#params: 1) (returns: TypeReference<Primitive<VOID>>)
[35m   debug [39m[0m[vm] ensureFunction: FunctionReference<InlineFunction<f:RUNS_IN_SWEDEN, rt: Primitive<VOID>>>
[35m   debug [39m[0mApply scheduling filter: region -> sweden
[35m   debug [39m[0m[vm] pushCall - call: InlineFunctionCall<f:RUNS_IN_SWEDEN> | job: SingleThreaded::QueueJob<id: 0, call: InlineFunctionCall<f:RUNS_IN_SWEDEN>>
[35m   debug [39m[0mGot VM from queue: Runtime::VirtualMachine<shouldAdvance: yes>
[35m   debug [39m[0m[vm] inline call: InlineFunctionCall<f:RUNS_IN_SWEDEN> (pc: 4)
[35m   debug [39m[0m[vm] next instruction for inline call: FNPARAM<Location<l:tag_resource_t>, Location<l:tag_resource>>
[35m   debug [39m[0m[vm] fnparam Location<l:tag_resource_t> Location<l:tag_resource>
[35m   debug [39m[0m[vm] ensureType: TypeReference<RESOURCE<Opaque<PROLOGUE::TAG>>>
[35m   debug [39m[0m[vm] fnparam: Location<l:tag_resource> <- ResourceReference<Prologue::TagResource<region -> sweden>>
[35m   debug [39m[0m[vm] assignvalue Location<l:msg> StringReference<Running in Sweden!>
[35m   debug [39m[0m[vm] Location<l:msg> <- StringReference<Running in Sweden!>
[35m   debug [39m[0m[vm] streampush Location<l:STDOUT> Location<l:msg>
[35m   debug [39m[0m[vm] ensureStream: StreamReference<LocalOutputStream<>>
[34m    info [39m[0m[l] Running in Sweden!
[35m   debug [39m[0m[vm] return0
[35m   debug [39m[0mApply bulk scheduling filters.
