[35m   debug [39mParsing argument: /home/garrettmills/Projects/swarm/test/049-resume-params/test.svi
[35m   debug [39mGot input file: /home/garrettmills/Projects/swarm/test/049-resume-params/test.svi
[35m   debug [39mVM: Skipping uncalled function body: BEGINFN<Location<f:HANDLER1>, TypeReference<Primitive<VOID>>>, pc: 10
[35m   debug [39mVM: assigneval Location<l:h1> PUSHEXHANDLER1<Location<f:HANDLER1>>
[35m   debug [39mVM: pushexhandler Location<f:HANDLER1>
[35m   debug [39mVM: ensureType: TypeReference<Primitive<NUMBER>>
[35m   debug [39mVM: ensureType: TypeReference<Primitive<VOID>>
[35m   debug [39mVM: load inline function: HANDLER1 (#params: 1) (returns: TypeReference<Primitive<VOID>>)
[35m   debug [39mVM: ensureFunction: FunctionReference<InlineFunction<f:HANDLER1, rt: Primitive<VOID>>>
[35m   debug [39mVM: Location<l:h1> <- StringReference<69149336-f3d4-4d5e-b705-b860e1fb7b98>
[35m   debug [39mVM: assigneval Location<l:bad> DIVIDE<NumberReference<14.000000>, NumberReference<0.000000>>
[35m   debug [39mVM: divide NumberReference<14.000000> NumberReference<0.000000>
[35m   debug [39mVM: ensureNumber: NumberReference<14.000000>
[35m   debug [39mVM: ensureNumber: NumberReference<0.000000>
[31m   error [39m[0mRuntime error: Attempted to divide by zero (RuntimeExCode(DivisionByZero, code: 8))
[35m   debug [39mVM: inline call: InlineFunctionCall<f:HANDLER1> (pc: 0)
[35m   debug [39mVM: next instruction for inline call: FNPARAM<TypeReference<Primitive<NUMBER>>, Location<l:code>>
[35m   debug [39mVM: fnparam TypeReference<Primitive<NUMBER>> Location<l:code>
[35m   debug [39mVM: fnparam: Location<l:code> <- NumberReference<8.000000>
[35m   debug [39mVM: scopeof Location<l:msg>
[35m   debug [39mVM: assigneval Location<l:msg> CALL1<Location<f:NUMBER_TO_STRING>, Location<l:code>>
[35m   debug [39mVM: assignEval: got call0 or call1
[35m   debug [39mVM: assignEval: jumping to call
[35m   debug [39mVM: call1 Location<f:NUMBER_TO_STRING> Location<l:code>
[35m   debug [39mVM: ensureFunction: FunctionReference<NumberToStringFunction<>>
[35m   debug [39mVM: provider call: NumberToStringFunctionCall<>
[35m   debug [39mVM: assigneval Location<l:msg> CALL1<Location<f:NUMBER_TO_STRING>, Location<l:code>>
[35m   debug [39mVM: assignEval: got call0 or call1
[35m   debug [39mVM: assignEval: jumped from return
[35m   debug [39mVM: Location<l:msg> <- StringReference<8.000000>
[35m   debug [39mVM: assigneval Location<l:msg> STRCONCAT<StringReference<Handled: >, Location<l:msg>>
[35m   debug [39mVM: strconcat StringReference<Handled: > Location<l:msg>
[35m   debug [39mVM: ensureString: StringReference<Handled: >
[35m   debug [39mVM: ensureString: StringReference<8.000000>
[35m   debug [39mVM: Location<l:msg> <- StringReference<Handled: 8.000000>
[35m   debug [39mVM: streampush Location<s:STDOUT> Location<l:msg>
[35m   debug [39mVM: ensureStream: StreamReference<SingleThreaded::Stream<of: Primitive<STRING>>>
[35m   debug [39mVM: scopeof Location<l:resume>
[35m   debug [39mVM: assigneval Location<l:resume> CURRY<Location<f:AFTER1>, Location<l:msg>>
[35m   debug [39mVM: curry Location<f:AFTER1> Location<l:msg>
[35m   debug [39mVM: ensureType: TypeReference<Primitive<STRING>>
[35m   debug [39mVM: ensureType: TypeReference<Primitive<VOID>>
[35m   debug [39mVM: load inline function: AFTER1 (#params: 1) (returns: TypeReference<Primitive<VOID>>)
[35m   debug [39mVM: ensureFunction: FunctionReference<InlineFunction<f:AFTER1, rt: Primitive<VOID>>>
[35m   debug [39mVM: Location<l:resume> <- FunctionReference<CurriedFunction<f: InlineFunction<f:AFTER1, rt: Primitive<VOID>>, ref: StringReference<Handled: 8.000000>>>
[35m   debug [39mVM: resume Location<l:resume>
[35m   debug [39mVM: ensureFunction: FunctionReference<CurriedFunction<f: InlineFunction<f:AFTER1, rt: Primitive<VOID>>, ref: StringReference<Handled: 8.000000>>>
[35m   debug [39mVM: inline call: InlineFunctionCall<f:AFTER1> (pc: 13)
[35m   debug [39mVM: next instruction for inline call: FNPARAM<TypeReference<Primitive<STRING>>, Location<l:msg>>
[35m   debug [39mVM: fnparam TypeReference<Primitive<STRING>> Location<l:msg>
[35m   debug [39mVM: fnparam: Location<l:msg> <- StringReference<Handled: 8.000000>
[35m   debug [39mVM: streampush Location<s:STDOUT> StringReference<After 1!>
[35m   debug [39mVM: ensureStream: StreamReference<SingleThreaded::Stream<of: Primitive<STRING>>>
[35m   debug [39mVM: streampush Location<s:STDOUT> Location<l:msg>
[35m   debug [39mVM: ensureStream: StreamReference<SingleThreaded::Stream<of: Primitive<STRING>>>
[35m   debug [39mVM: popexhandler Location<l:h1>
[35m   debug [39mVM: ensureString: StringReference<69149336-f3d4-4d5e-b705-b860e1fb7b98>
[35m   debug [39mVM: return0
