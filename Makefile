# The executable to write
TARGET_EXEC ?= swarmc

# Some helper constants
BUILD_DIR ?= ./build
DEBUG_BUILD_DIR ?= ./build_debug
SRC_DIRS ?= ./src
LEXER := flex
BISON := bison
Q := @
CXX := clang++
ECHO := $(Q)./bin/color.bash
ECXX := $(ECHO) blue "    CXX "
ETEST := $(ECHO) red "   TEST "
ELEXER := $(ECHO) yellow "  LEXER "
EPARSER := $(ECHO) purple " PARSER"
EBIN := $(ECHO) green "    BIN "

# Files automatically generated by Bison. Removed by clean.
BISON_FILES := src/bison/grammar.hh src/bison/parser.cc src/bison/parser.output src/bison/stack.hh src/bison/parser_debug.cc src/bison/parser_debug.output

SRCS := $(shell find $(SRC_DIRS) -name *.cpp -or -name *.c -or -name *.s)
HEADERS := $(shell find $(SRC_DIRS) -name *.hpp -or -name *.h)
SRCS_CPP_HEADERS := $(SRCS:.cpp=.h)
MISSING_CPP_HEADERS := $(filter-out $(HEADERS),$(SRCS_CPP_HEADERS))
OBJS := $(SRCS:%=$(BUILD_DIR)/%.o)
DEPS := $(OBJS:.o=.d)
DEBUG_OBJS := $(SRCS:%=$(DEBUG_BUILD_DIR)/%.o)
DEBUG_DEPS := $(DEBUG_OBJS:.o=.d)

INC_DIRS := $(shell find $(SRC_DIRS) -type d)
INC_FLAGS := $(addprefix -I,$(INC_DIRS))

CXXFLAGS += -std=c++20
CPPFLAGS ?= $(INC_FLAGS) -MMD -MP -g -std=c++20 -Wall
CPPFLAGS_debug ?= $(INC_FLAGS) -MMD -MP -g -std=c++20 -Wall -DSWARM_DEBUG #-DNSLIB_GC_TRACK
#LDFLAGS ?= -lredis++ -lhiredis -pthread
LDFLAGS ?= -rdynamic -ldl -lbinn -lhiredis -lredis++ -pthread

TEST_DIR := tests
TEST_SOURCES := $(shell find $(TEST_DIR) -name *.cpp -or -name *.c -or -name *.s)
TEST_OBJECTS = $(patsubst $(TEST_DIR)/%.cpp,$(BUILD_DIR)/test_%.o,$(TEST_SOURCES))
TEST_LIBRARY_OBJ = ./build/./src/lib/catch_amalgamated.cpp.o
DEBUG_TEST_LIBRARY_OBJ = ./build_debug/./src/lib/catch_amalgamated.cpp.o
TEST_EXEC := swarmc_tests
TESTFLAGS ?= -Wextra -DSWARMC_BUILD_TEST_SUITE

$(TARGET_EXEC): $(filter-out $(TEST_LIBRARY_OBJ), $(OBJS)) $(HEADERS) $(BUILD_DIR)/parser.o $(BUILD_DIR)/lexer.o
	$(EBIN) $@
	$(Q)$(CXX) $(filter-out $(TEST_LIBRARY_OBJ), $(OBJS)) $(BUILD_DIR)/parser.o $(BUILD_DIR)/lexer.o -o $@ $(LDFLAGS)

.PHONY: all
all: $(TARGET_EXEC) debug tests

.PHONY: info
info:
	@echo HEADERS $(HEADERS)
	@echo SRCS_CPP_HEADERS $(SRCS_CPP_HEADERS)
	@echo MISSING_CPP_HEADERS $(MISSING_CPP_HEADERS)

$(MISSING_CPP_HEADERS):

# c++ sources
$(BUILD_DIR)/%.cpp.o: %.cpp %.h src/bison/parser.cc
	$(Q)$(MKDIR_P) $(dir $@)
	$(ECXX) $<
	$(Q)$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $< -o $@

# Build the flex-generated lexer source. Relies on parser code, so build that first.
$(BUILD_DIR)/lexer.yy.cc: src/swarm.l $(BUILD_DIR)/parser.o
	$(ELEXER) $<
	$(Q)$(LEXER) --outfile $(BUILD_DIR)/lexer.yy.cc $<

$(BUILD_DIR)/lexer.o: $(BUILD_DIR)/lexer.yy.cc
	$(ECXX) $<
	$(Q)$(CXX) $(CPPFLAGS) -c $(BUILD_DIR)/lexer.yy.cc -o $(BUILD_DIR)/lexer.o

$(BUILD_DIR)/parser.o: src/bison/parser.cc
	$(ECXX) $<
	$(Q)$(CXX) $(CPPFLAGS) -c -o $@ $<



# Build a version with debugging enabled. Should be (mostly) non-clashing with the release version
debug: $(filter-out $(DEBUG_TEST_LIBRARY_OBJ), $(DEBUG_OBJS)) $(HEADERS) $(DEBUG_BUILD_DIR)/parser_debug.o $(DEBUG_BUILD_DIR)/lexer.o
	$(EBIN) $(TARGET_EXEC)_debug
	$(Q)$(CXX) $(filter-out $(DEBUG_TEST_LIBRARY_OBJ), $(DEBUG_OBJS)) $(DEBUG_BUILD_DIR)/lexer.o $(DEBUG_BUILD_DIR)/parser_debug.o -o $(TARGET_EXEC)_debug $(LDFLAGS) $(CPPFLAGS_debug)

# c++ sources for debug
$(DEBUG_BUILD_DIR)/%.cpp.o: %.cpp %.h src/bison/parser_debug.cc
	$(Q)$(MKDIR_P) $(dir $@)
	$(ECXX) $<
	$(Q)$(CXX) $(CPPFLAGS_debug) $(CPPFLAGS_debug) -c $< -o $@

# Build the flex-generated lexer source. Relies on parser code, so build that first.
$(DEBUG_BUILD_DIR)/lexer.yy.cc: src/swarm.l $(DEBUG_BUILD_DIR)/parser_debug.o
	$(ELEXER) $<
	$(Q)$(LEXER) --outfile $(DEBUG_BUILD_DIR)/lexer.yy.cc $<

$(DEBUG_BUILD_DIR)/lexer.o: $(DEBUG_BUILD_DIR)/lexer.yy.cc
	$(ECXX) $<
	$(Q)$(CXX) $(CPPFLAGS_debug) -c $(DEBUG_BUILD_DIR)/lexer.yy.cc -o $(DEBUG_BUILD_DIR)/lexer.o

# This is PHONY to force the Bison generated source files to re-generate
# between debug and release builds.
src/bison/parser.cc: src/bison/swarm.yy
	$(EPARSER) $<
	$(Q)cd src/bison && $(BISON) -v -Wall --defines=grammar.hh -v swarm.yy -o parser.cc

$(DEBUG_BUILD_DIR)/parser.o: src/bison/parser.cc
	$(ECXX) $<
	$(Q)$(CXX) $(CPPFLAGS_debug) -c -o $@ $<

src/bison/parser_debug.cc: src/bison/swarm.yy
	$(EPARSER) $<
	$(Q)cd src/bison && $(BISON) -v -Wall --defines=grammar.hh -v swarm.yy -o parser_debug.cc

$(DEBUG_BUILD_DIR)/parser_debug.o: src/bison/parser_debug.cc
	$(ECXX) $<
	$(Q)$(CXX) $(CPPFLAGS_debug) -c -o $@ $<



# Build the test suite:
#  - Build all the object files for the main application
#  - Build all the object files for the tests/*.cpp cases
#  - Compile the test suite binary, excluding main.cpp.o
.PHONY: tests
tests: $(TEST_EXEC)

$(TEST_EXEC): $(TEST_OBJECTS) $(filter-out ./build/./src/main.cpp.o, $(OBJS)) $(HEADERS) $(BUILD_DIR)/parser.o $(BUILD_DIR)/lexer.o
	$(EBIN) $@
	$(Q)$(CXX) $(CXXFLAGS) $(CPPFLAGS) $(TESTFLAGS) $(TEST_OBJECTS) $(filter-out ./build/./src/main.cpp.o, $(OBJS)) $(BUILD_DIR)/parser.o $(BUILD_DIR)/lexer.o -o $@ $(LDFLAGS)

$(BUILD_DIR)/test_%.o: $(TEST_DIR)/%.cpp src/bison/parser.cc
	$(Q)$(MKDIR_P) $(dir $@)
	$(ETEST) $<
	$(Q)$(CXX) $(CXXFLAGS) $(CPPFLAGS) $(TESTFLAGS) -c $< -o $@



.PHONY: clean
clean:
	$(Q)$(RM) -r $(BUILD_DIR) $(TARGET_EXEC) $(DEBUG_BUILD_DIR) $(TARGET_EXEC)_debug $(BISON_FILES) run_tests vgcore.* $(TEST_EXEC)


.PHONY: test
test: tests
	./$(TEST_EXEC)

-include $(DEPS)

MKDIR_P ?= mkdir -p

.PHONY: docker
docker: Dockerfile
	docker image build -t "${DOCKER_REGISTRY}/swarmlang/swarm:latest" .

.PHONY: docker_run
docker_run:
	docker run --rm -it "${DOCKER_REGISTRY}/swarmlang/swarm:latest" bash



# Dependencies -- use `make build_deps`

.PHONY: binn
binn:
	git submodule update --init
	$(MAKE) -C mod/binn
	sudo $(MAKE) -C mod/binn install

.PHONY: hiredis
hiredis:
	git submodule update --init
	$(MAKE) -C mod/hiredis
	sudo $(MAKE) -C mod/hiredis install
	cd mod/redis-plus-plus && mkdir build && cd build && cmake .. && cd ../../..
	$(MAKE) -C mod/redis-plus-plus/build
	sudo $(MAKE) -C mod/redis-plus-plus/build install

.PHONY: build_deps
build_deps:
	$(MAKE) binn
	$(MAKE) hiredis
