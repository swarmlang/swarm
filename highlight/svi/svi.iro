#################################################################
## Iro
################################################################
##
## * Press Ctrl + '+'/'-' To Zoom in
## * Press Ctrl + S to save and recalculate...
## * Documents are saved to web storage.
## * Only one save slot supported.
## * Matches cannot span lines.
## * Unicode chars must be defined in \u0000 to \uffff format.
## * All matches must be contained by a single group ( ... )
## * Look behinds not permitted, (?<= or (?<!
## * Look forwards are permitted (?= or (?!
## * Constants are defined as __my_const = (......)
## * The \= format allows unescaped regular expressions
## * Constants referenced by match \= $${__my_const}
## * Constants can reference other constants
## * You are free to delete all the default scopes.
## * Twitter : ainslec , Web: http://eeyo.io/iro
##
################################################################

name                   = svi
file_extensions []     = svi;

################################################################
## Constants
################################################################

__MY_CONSTANT \= (\b[a-zA-Z_][a-zA-Z0-9_]*)

__REF \= ((\$l|\$s):[a-zA-Z0-9_]*)

__TREF \= ((o|p):[a-zA-Z0-9_]*)

__BOOL \= (true|false)

__SREF \= (f:[a-zA-Z0-9_]*)

__ASSIGN \= (<\-)

__INST \= (beginfn|fnparam|return|curry|callif|callelse|call|pushcallif|pushcallelse|pushcall|drain|exit|out|err|streaminit|streampush|streampop|streamclose|streamempty|typify|lock|unlock|equal|scopeof|typeof|compatible|nand|and|xor|nor|or|not|mapinit|mapset|mapget|maplength|mapkeys|enuminit|enumappend|enumprepend|enumlength|enumget|enumset|enumerate|strconcat|strlength|strslice|plus|minus|times|divide|power|mod|neg|gte|gt|lte|lt|while|with|pushexhandler|popexhandler|raise|resume|otypeinit|otypeprop|otypedel|otypeget|otypefinalize|otypesubset|objinit|objset|objget|objinstance|objcurry)

################################################################
## Styles
################################################################

styles [] {

.comment : style {
   color                 = light_green
   italic                = true
   ace_scope             = comment
   textmate_scope        = comment
   pygments_scope        = Comment
}

.keyword : style {
   color     = white
   italic = true
   ace_scope             = keyword
   textmate_scope        = keyword
   pygments_scope        = Keyword
}

.keyvalue : style {
   color     = gold
   ace_scope             = keyword
   textmate_scope        = keyword
   pygments_scope        = Keyword
}

.type : style {
   color     = cyan
   ace_scope             = entity.name.type
   textmate_scope        = entity.name.type
   pygments_scope        = Keyword.Type
}

.prologue : style {
   color = yellow

   ace_scope             = entity.name.function
   textmate_scope        = entity.name.function
   pygments_scope        = Name.Function
}

.var : style {
   color     = cyan
   ace_scope             = variable
   textmate_scope        = variable
   pygments_scope        = Name.Variable
}

.svar : style {
   color     = orange

   ace_scope             = entity.name.function
   textmate_scope        = entity.name.function
   pygments_scope        = Name.Function
}

.numeric : style {
   color                 = gold
   ace_scope             = constant.numeric
   textmate_scope        = constant.numeric
   pygments_scope        = Number
}

.punctuation : style {
   color     = red_2
   ace_scope             = punctuation
   textmate_scope        = punctuation
   pygments_scope        = Punctuation
}

.text : style {
   color                 = brown
   ace_scope             = string
   textmate_scope        = string
   pygments_scope        = String
}

.illegal : style {
   color                 = white
   background_color      = red
   ace_scope             = invalid
   textmate_scope        = invalid
   pygments_scope        = Generic.Error
}

}

#################################################
## Parse contexts
#################################################

contexts [] {

##############################################
## Main Context - Entry point context
##############################################

main : context {

   : pattern {
      regex          \= $${__REF}
      styles []       = .var;
   }

   : pattern {
      regex          \= $${__TREF}
      styles []       = .type;
   }

   : pattern {
      regex          \= $${__SREF}
      styles []       = .svar;
   }

   : pattern {
      regex          \= $${__ASSIGN}
      styles []       = .punctuation;
   }

   : pattern {
      regex          \= $${__BOOL}
      styles []       = .keyvalue;
   }

   : pattern {
      regex          \= $${__INST}
      styles []       = .keyword;
   }

   : include "numeric" ;

   : inline_push {
      regex          \= (\")
      styles []       = .text;
      default_style   = .text
      : pop {
         regex       \= (\")
         styles []    = .text;
      }
   }

   : pattern {
      regex          \= (\-\-.*)
      styles []       = .comment;
   }
}

#################################################
## End of Contexts
#################################################

###########################################
## Numeric Context
###########################################

numeric : context {
   : pattern {
      regex          \= (\b\d+\.\d+)
      styles []       = .numeric;
   }

   : pattern {
      regex          \= (\b\d+)
      styles []       = .numeric;
   }
}

}
